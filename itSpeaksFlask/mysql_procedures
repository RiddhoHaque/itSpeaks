CREATE TABLE Users (
    UserID int NOT NULL AUTO_INCREMENT,
    Name varchar(255) NOT NULL,
    Email varchar(255) NOT NULL,
    Gender varchar(255) NOT NULL,
	Age int,
	Username varchar(255) NOT NULL,
	Password varchar(255) NOT NULL,
	interestMask int,
    PRIMARY KEY (UserID),
	UNIQUE KEY (Username, Password)
);

ALTER TABLE Users
ADD nature varchar(25);

ALTER TABLE Users
ADD About varchar(300);

ALTER TABLE Users
ADD profile_photo_file varchar(100);

CREATE TABLE Books (
    BookID int NOT NULL AUTO_INCREMENT,
    Name varchar(255) NOT NULL,
    Author varchar(255) NOT NULL,
    genreMask INT,
	year INT,
	publisher INT,
	isPrivate BOOLEAN,
	file_address varchar(255) NOT NULL,
    PRIMARY KEY (BookID)
);

ALTER TABLE Books 
DROP COLUMN publisher;

ALTER TABLE Books  
ADD COLUMN publisher varchar(255);

ALTER TABLE Books
ADD COLUMN thumbnail_address varchar(255);

ALTER TABLE Books
  ADD COLUMN uploaderID INT,
  ADD FOREIGN KEY UPLOADER_ID_FK(uploaderID) REFERENCES Users(UserID) ON DELETE CASCADE;

ALTER TABLE Books
ADD COLUMN audiobook_folder varchar(255);

CREATE TABLE BLOGPOSTS(
	BlogID int NOT NULL AUTO_INCREMENT,
	UserID int,
	Message varchar(1000),
    PRIMARY KEY (BlogID),
	CONSTRAINT FOREIGN KEY FK_UID (UserID) REFERENCES Users(UserID)
);

CREATE TABLE UPVOTES(
	BlogID int,
	UserID int,
	PRIMARY KEY (BlogID, UserID),
	CONSTRAINT FOREIGN KEY FK_UID (UserID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FK_BID (BlogID) REFERENCES BLOGPOSTS(BlogID)
);


CREATE TABLE RATINGS(
	UserID int,
	BookID int,
	Rating int,
	PRIMARY KEY(UserID, BookID),		
	CONSTRAINT FOREIGN KEY FK_UID (UserID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FK_BID (BookID) REFERENCES Books(BookID),
	CONSTRAINT RATING_CHK CHECK (Rating BETWEEN 0 AND 5)
);

CREATE TABLE READINGS(
	UserID int,
	BookID int,
	PRIMARY KEY(UserID, BookID),		
	CONSTRAINT FOREIGN KEY FK_UID (UserID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FK_BID (BookID) REFERENCES Books(BookID)
);

CREATE TABLE FOLLOWING(
	FOLLOWINGID int,
	FOLLOWERID int,
	PRIMARY KEY(FOLLOWINGID, FOLLOWERID),
	CONSTRAINT FOREIGN KEY FING_ID(FOLLOWINGID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FED_BID (FOLLOWERID) REFERENCES Users(UserID)		
);


DROP TABLE IF EXISTS REVIEWS;
CREATE TABLE REVIEWS(
	REVIEWERID int,
	BOOKID int,
	REVIEWFILE varchar(55),
	PRIMARY KEY(REVIEWERID, BOOKID),
	CONSTRAINT FOREIGN KEY FK_REV_ID(REVIEWERID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FK_BK_ID (BOOKID) REFERENCES Books(BookID)
);

ALTER TABLE REVIEWS
ADD reviewID int NOT NULL AUTO_INCREMENT;

DROP TABLE IF EXISTS REVIEW_UPVOTES;
CREATE TABLE REVIEW_UPVOTES(
	ReviewID int,
	UserID int, 
	PRIMARY KEY(ReviewID, UserID),
	CONSTRAINT FOREIGN KEY FK_UID (UserID) REFERENCES Users(UserID),
	CONSTRAINT FOREIGN KEY FK_RID (ReviewID) REFERENCES REVIEWS(ReviewID)
);


DROP procedure IF EXISTS sp_validate_username_and_email;
DELIMITER $$
CREATE PROCEDURE sp_validate_username_and_email(
	IN usernamein varchar(255),
	IN Emailin varchar(255)
)
BEGIN
	select * from Users where Username=usernamein or Email=Emailin; 
END$$
DELIMITER;


DROP procedure IF EXISTS sp_createUser;
DELIMITER $$
CREATE PROCEDURE `sp_createUser`(
    IN Namein varchar(255), IN Emailin varchar(255), IN Genderin varchar(255), IN Agein int,IN Usernamein varchar(255),IN Passwordin varchar(255),IN interestMaskin int,IN naturein varchar(25))
BEGIN
    if (select exists (select 1 from Users where Username = Usernamein)) THEN
         select 'Username Exists !!';  
    ELSE
     	insert into Users( Name,  Email,  Gender,  Age,  Username,  Password,  interestMask,  nature) 
        values           (Namein, Emailin,Genderin,Agein,Usernamein,Passwordin,interestMaskin,naturein);
    END IF;
END$$
DELIMITER ;


DROP procedure IF EXISTS sp_validateUser;
DELIMITER $$
CREATE PROCEDURE `sp_validateUser`(
    IN usernamein varchar(255),
    IN Passwordin varchar(255)
)
BEGIN
    select userid from Users
	where usernamein=username and Passwordin=Password; 
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_get_number_of_books_uploaded_by_user;
DELIMITER $$
CREATE PROCEDURE `sp_get_number_of_books_uploaded_by_user`(
    IN uploaderIDin INT
)
BEGIN
    select count(BookID) from Books
	where uploaderID=uploaderIDin; 
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_addBook;
DELIMITER $$
CREATE PROCEDURE `sp_addBook`( IN Namein varchar(255), IN Authorin varchar(255), IN genreMaskin INT, IN yearin INT, IN publisherin varchar(255), IN isPrivatein BOOLEAN, IN file_addressin varchar(255), IN thumbnail_addressin varchar(255) , IN folder_addressin varchar(255), IN uploaderIDin INT)
BEGIN
	insert into Books( Name,  Author,  genreMask, year, publisher, isPrivate, file_address, thumbnail_address, audiobook_folder, uploaderID) 
       values ( Namein,  Authorin,  genreMaskin, yearin, publisherin, isPrivatein, file_addressin, thumbnail_addressin, folder_addressin, uploaderIDin);    
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_get_next_book_id;
DELIMITER $$
CREATE PROCEDURE `sp_get_next_book_id`()
BEGIN
    select max(BookID)+1 from Books;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_get_next_blog_id;
DELIMITER $$
CREATE PROCEDURE `sp_get_next_blog_id`()
BEGIN
    select max(BlogID)+1 from BLOGPOSTS;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_addBlog;
DELIMITER $$
CREATE PROCEDURE `sp_addBlog`(
	IN useridin INT,
	IN Messagein varchar(1000)
)
BEGIN
    insert into BLOGPOSTS( UserID,  Message) 
       values ( useridin,  Messagein);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_searchBooks;
DELIMITER $$
CREATE PROCEDURE `sp_searchBooks`(
	IN patternIn varchar(100)
)
BEGIN
    select * from Books where (Name like patternIn AND NOT isPrivate) OR (Author like patternIn AND NOT isPrivate) OR (publisher like patternIn  AND NOT isPrivate);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_searchUsers;
DELIMITER $$
CREATE PROCEDURE `sp_searchUsers`(
	IN patternIn varchar(100)
)
BEGIN
    select * from Users where Name like patternIn OR Username like patternIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookData;
DELIMITER $$
CREATE PROCEDURE `sp_getBookData`(
	IN bookIdIn INT
)
BEGIN
    select * from Books where bookIdIn=BookID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookRating;
DELIMITER $$
CREATE PROCEDURE `sp_getBookRating`(
	IN bookIdIn INT
)
BEGIN
    select AVG(Rating) from RATINGS where bookIdIn=BookID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_isBookRated;
DELIMITER $$
CREATE PROCEDURE `sp_isBookRated`(
	IN bookIdIn INT
)
BEGIN
    select COUNT(*) from RATINGS where bookIdIn=BookID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookReviews;
DELIMITER $$
CREATE PROCEDURE `sp_getBookReviews`(
	IN bookIdIn INT
)
BEGIN
    select * from REVIEWS where bookIdIn=BOOKID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getNumberOfReads;
DELIMITER $$
CREATE PROCEDURE `sp_getNumberOfReads`(
	IN bookIdIn INT
)
BEGIN
    select COUNT(DISTINCT UserID) from READINGS where bookIdIn=BOOKID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getUploaderName;
DELIMITER $$
CREATE PROCEDURE `sp_getUploaderName`(
	IN bookIdIn INT
)
BEGIN
    select Username from Users, Books where bookIdIn=BOOKID and uploaderId=userID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getReviewerName;
DELIMITER $$
CREATE PROCEDURE `sp_getReviewerName`(
	IN reviewerIdIn INT
)
BEGIN
    select Name, profile_photo_file from Users where userId=reviewerID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getMyThumbnail;
DELIMITER $$
CREATE PROCEDURE `sp_getMyThumbnail`(
	IN userIdIn INT
)
BEGIN
    select profile_photo_file from Users where userId=userIdin;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_addRating;
DELIMITER $$
CREATE PROCEDURE `sp_addRating`(
	IN UserIDIn INT,
	IN bookIdIn INT,
	IN ratingIn INT
)
BEGIN
    INSERT INTO RATINGS (UserID, BookID, Rating) values (UserIDIn, bookIdIn, ratingIn);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_deleteRating;
DELIMITER $$
CREATE PROCEDURE `sp_deleteRating`(
	IN UserIDIn INT,
	IN bookIdIn INT
)
BEGIN
    DELETE FROM RATINGS WHERE UserID=UserIDIn AND BookID=bookIdIn;
END$$
DELIMITER ;



DROP PROCEDURE IF EXISTS sp_get_next_review_id;
DELIMITER $$
CREATE PROCEDURE `sp_get_next_review_id`(
)
	
BEGIN
    select max(reviewID)+1 from REVIEWS;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_addReview;
DELIMITER $$
CREATE PROCEDURE `sp_addReview`(
	userIDIn INT,
	bookIdIn INT,
	fileNameIn varchar(55)
)
	
BEGIN
    INSERT INTO REVIEWS (UserID, BOOKID, Message) values (userIDIn, bookIdIn, fileNameIn);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookText;
DELIMITER $$
CREATE PROCEDURE `sp_getBookText`(
	bookIdIn INT
)
	
BEGIN
    SELECT Name, Author, file_address from Books where BookID=bookIdIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookAudio;
DELIMITER $$
CREATE PROCEDURE `sp_getBookAudio`(
	bookIdIn INT
)
	
BEGIN
    SELECT Name, Author, audiobook_folder from Books where BookID=bookIdIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getReviewerName;
DELIMITER $$
CREATE PROCEDURE `sp_getReviewerName`(
	reviewIdIn INT
)
	
BEGIN
    SELECT name, profile_photo_file  from Users, REVIEWS where  REVIEWS.UserID=Users.UserID and reviewID=reviewIdIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_isBookReadByUser;
DELIMITER $$
CREATE PROCEDURE `sp_isBookReadByUser`(
	userIdIn INT,
	bookIdIn INT
)
	
BEGIN
    SELECT *  from READINGS where  UserID=userIDIn and BookID=bookIdIn;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_addRead;
DELIMITER $$
CREATE PROCEDURE `sp_addRead`(
	userIdIn INT,	
	bookIdIn INT
)
	
BEGIN
    INSERT INTO READINGS (UserID, BookID) values (userIDIn, bookIdIn);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getUserInformation;
DELIMITER $$
CREATE PROCEDURE `sp_getUserInformation`(
	usernameIn varchar(255)
)
	
BEGIN
    SELECT UserID, Name, Email, Gender, Age, interestMask, nature, About, profile_photo_file from Users where username=usernameIn;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getPublicBooksUploadedByUser;
DELIMITER $$
CREATE PROCEDURE `sp_getPublicBooksUploadedByUser`(
	uploaderIn INT
)
	
BEGIN
    select Books.BookID, Name, Author, thumbnail_address from Books where uploaderID=uploaderIn and NOT isPrivate; 
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getAllBooksUploadedByUser;
DELIMITER $$
CREATE PROCEDURE `sp_getAllBooksUploadedByUser`(
	uploaderIn INT
)
	
BEGIN
    select Books.BookID, Name, Author, thumbnail_address from Books where uploaderID=uploaderIn; 
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getAllBooksReadByUser;
DELIMITER $$
CREATE PROCEDURE `sp_getAllBooksReadByUser`(
	userIn INT
)
	
BEGIN
    select Books.BookID, Name, Author, thumbnail_address from Books, READINGS where READINGS.BookID=Books.BookID and READINGS.userID=userIn; 
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getPublicBooksReadByUser;
DELIMITER $$
CREATE PROCEDURE `sp_getPublicBooksReadByUser`(
	userIn INT
)
	
BEGIN
    select Books.BookID, Name, Author, thumbnail_address from Books, READINGS where READINGS.BookID=Books.BookID and READINGS.userID=userIn and NOT Books.isPrivate; 
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getAllBlogPosts;
DELIMITER $$
CREATE PROCEDURE `sp_getAllBlogPosts`(
	userIn INT
)
	
BEGIN
    select * from BLOGPOSTS where userID=userIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getNumberOfUpvotes;
DELIMITER $$
CREATE PROCEDURE `sp_getNumberOfUpvotes`(
	blogIn INT
)
	
BEGIN
    select count(*) from UPVOTES where BlogID=blogIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getNumberOfFollowers;
DELIMITER $$
CREATE PROCEDURE `sp_getNumberOfFollowers`(
	userIn INT
)
	
BEGIN
    select count(*) from FOLLOWING where FOLLOWINGID=userIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getUserName;
DELIMITER $$
CREATE PROCEDURE `sp_getUserName`(
	userIn INT
)
	
BEGIN
    select username from Users where UserID=userIn;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getUserInformationById;
DELIMITER $$
CREATE PROCEDURE `sp_getUserInformationById`(
	userIn INT
)
BEGIN
    select Name, Email, Gender, Age, interestMask, nature, About, profile_photo_file from Users where UserID=userIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS spIsFollowing;
DELIMITER $$
CREATE PROCEDURE `spIsFollowing`(
	usera INT,
	userb INT
)
BEGIN
    select * from FOLLOWING where FOLLOWINGID=usera AND FOLLOWERID=userb;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS spAddFollow;
DELIMITER $$
CREATE PROCEDURE `spAddFollow`(
	usera INT,
	userb INT
)
BEGIN
    INSERT into FOLLOWING (FOLLOWINGID, FOLLOWERID) values (usera, userb);
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getActualPassword;
DELIMITER $$
CREATE PROCEDURE `sp_getActualPassword`(
	userin INT
)
BEGIN
    select password from Users where userin=UserID;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_updateUser;
DELIMITER $$
CREATE PROCEDURE `sp_updateUser`(
	_name varchar(255), 
	_email varchar(255), 
	_gender varchar(255), 
	_age int,
	_about varchar(300), 
	_nature varchar(25),
	_input_mask INT,
	curr_id INT
)
BEGIN
    UPDATE Users SET Name=_name, Email=_email, Gender=_gender, Age=_age, About=_about, nature=_nature, interestMask=_input_mask where curr_id=UserID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_updateUserPassword;
DELIMITER $$
CREATE PROCEDURE `sp_updateUserPassword`(
	_new_password varchar(255),
	curr_id INT
)
BEGIN
    UPDATE Users SET password=_new_password where curr_id=UserID;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_updateProfilePicture;
DELIMITER $$
CREATE PROCEDURE `sp_updateProfilePicture`(
	_profilePhotoName varchar(100),
	curr_id INT
)

BEGIN
    UPDATE Users SET profile_photo_file=_profilePhotoName where curr_id=UserID;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_addDefaultPhoto;
DELIMITER $$
CREATE PROCEDURE `sp_addDefaultPhoto`(
	_username varchar(255),
	_profile_photo_file varchar(255)
)

BEGIN
    UPDATE Users SET profile_photo_file=_profile_photo_file where username=_username;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getUserProfilePhotoAndName;
DELIMITER $$
CREATE PROCEDURE `sp_getUserProfilePhotoAndName`(
	_userin INT
)

BEGIN
    select profile_photo_file, Name, username from Users where UserID=_userin;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBlogsFromFollowed;
DELIMITER $$
CREATE PROCEDURE `sp_getBlogsFromFollowed`(
	_userin INT
)

BEGIN
    select * from BLOGPOSTS where UserID=_userin OR UserID in (select FOLLOWINGID from FOLLOWING where FOLLOWERID=_userin);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getNumberOfUpvotes;
DELIMITER $$
CREATE PROCEDURE `sp_getNumberOfUpvotes`(
	_blogin INT
)

BEGIN
    select count(*) from UPVOTES where blogID=_blogin;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_addUpvote;
DELIMITER $$
CREATE PROCEDURE `sp_addUpvote`(
	_userin INT,	
	_blogin INT
)

BEGIN
    INSERT INTO UPVOTES (BlogID, UserID) values (_blogin, _userin);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_deleteUpvote;
DELIMITER $$
CREATE PROCEDURE `sp_deleteUpvote`(
	_userin INT,	
	_blogin INT
)

BEGIN
    DELETE FROM UPVOTES where BlogID=_blogin and  UserID=_userin;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_isUpvoted;
DELIMITER $$
CREATE PROCEDURE `sp_isUpvoted`(
	_userin INT,	
	_blogin INT
)

BEGIN
    select * from UPVOTES where BlogID=_blogin and UserID=_userin;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getBookNameAuthor;
DELIMITER $$
CREATE PROCEDURE `sp_getBookNameAuthor`(
	_bookin INT
)

BEGIN
    select Name, Author, thumbnail_address from Books where BookID=_bookin;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getAllBookID;
DELIMITER $$
CREATE PROCEDURE `sp_getAllBookID`(

)

BEGIN
    select BookID from Books;
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getNameAndDP;
DELIMITER $$
CREATE PROCEDURE `sp_getNameAndDP`(
	userIn INT
)

BEGIN
    select Name, profile_photo_file, username from Users where UserID=userIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getFriendsOfFriends;
DELIMITER $$
CREATE PROCEDURE `sp_getFriendsOfFriends`(
	userIn INT
)

BEGIN
    (select b.FOLLOWINGID from FOLLOWING a, FOLLOWING b where a.FOLLOWERID=userIn and a.FOLLOWINGID=b.FOLLOWERID and b.FOLLOWINGID not in (select FOLLOWINGID from FOLLOWING where FOLLOWERID=userIn));
END$$
DELIMITER ;


DROP PROCEDURE IF EXISTS sp_getNotFollowed;
DELIMITER $$
CREATE PROCEDURE `sp_getNotFollowed`(
	userIn INT
)

BEGIN
	select UserID from Users where UserID!=userIn and UserID not in (select FOLLOWINGID from FOLLOWING where FOLLOWERID=userIn);
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getMaxUserId;
DELIMITER $$
CREATE PROCEDURE `sp_getMaxUserId`(
)

BEGIN
	select MAX(UserID) from Users;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getInterestMask;
DELIMITER $$
CREATE PROCEDURE `sp_getInterestMask`(
	userIn INT
)

BEGIN
	select interestMask from Users where UserID=userIn;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getMatchingRatingVector;
 DELIMITER $$
CREATE PROCEDURE `sp_getMatchingRatingVector`(
	userA INT,
	userB INT
)
BEGIN
	select A.Rating, B.Rating from RATINGS A, RATINGS B where A.UserID=userA and B.UserID=userB and A.BookID=B.BookID;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getAllBooks;
DELIMITER $$
CREATE PROCEDURE `sp_getAllBooks`()
BEGIN
	select BookID, Name, Author, publisher from Books;
END$$
DELIMITER ;

DROP PROCEDURE IF EXISTS sp_getAllUsers;
DELIMITER $$
CREATE PROCEDURE `sp_getAllUsers`()
BEGIN
	select UserID, Name, username from Users;
END$$
DELIMITER ;
